From: =?utf-8?q?Timo_R=C3=B6hling?= <roehling@debian.org>
Date: Mon, 7 Feb 2022 08:12:11 +0100
Subject: Force inlining on simdlib helpers

The helper functions are called with intrinsics as function
arguments, but intrinsics cannot have their address taken, so
these calls only work if they are inlined by the compiler.
---
 faiss/utils/simdlib_neon.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/faiss/utils/simdlib_neon.h b/faiss/utils/simdlib_neon.h
index 1dbfa2c..6c6a028 100644
--- a/faiss/utils/simdlib_neon.h
+++ b/faiss/utils/simdlib_neon.h
@@ -147,7 +147,7 @@ struct set1_impl {
     D& d;
     T t;
     template <remove_cv_ref_t<decltype(std::declval<D>().val[0])> (*F)(T)>
-    inline void call() {
+    inline void call() __attribute__((always_inline)) {
         const auto v = F(t);
         d.val[0] = v;
         d.val[1] = v;
@@ -181,7 +181,7 @@ struct unary_func_impl {
     using Telem = remove_cv_ref_t<decltype(std::declval<T>().val[0])>;
     using Uelem = remove_cv_ref_t<decltype(std::declval<U>().val[0])>;
     template <Telem (*F)(Uelem)>
-    inline T call() {
+    inline T call() __attribute__((always_inline)) {
         T t;
         t.val[0] = F(a.val[0]);
         t.val[1] = F(a.val[1]);
@@ -208,7 +208,7 @@ struct binary_func_impl {
     using Telem = remove_cv_ref_t<decltype(std::declval<T>().val[0])>;
     using Uelem = remove_cv_ref_t<decltype(std::declval<U>().val[0])>;
     template <Telem (*F)(Uelem, Uelem)>
-    inline T call() {
+    inline T call() __attribute__((always_inline)) {
         T t;
         t.val[0] = F(a.val[0], b.val[0]);
         t.val[1] = F(a.val[1], b.val[1]);
